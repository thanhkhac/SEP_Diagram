@startuml
title QuestionSetEndpoint


' ==== Chung ====
class ApiResponse<T> {
      +bool Success
      +string Message
      +T Data
}

interface ISender {
      +Send<TResponse>(request): Task<TResponse>
}

interface IRequestHandler<TRequest, TResponse> {
      +Handle(request: TRequest): Task<TResponse>
}

interface IApplicationDbContext {
+SaveChangesAsync(): Task<int>
}

QuestionSetEndpoint ..> ApiResponse : <<use>>

' ==== ENDPOINT ====
class QuestionSetEndpoint {
+CreateQuestionSet(command: CreateQuestionSetCommand, sender: ISender): Task<Ok<ApiResponse<string>>>
}

QuestionSetEndpoint ..> CreateQuestionSetCommand : <<use>>
QuestionSetEndpoint ..> ISender : <<use>>

' ==== COMMAND and Dtos ====
class CreateQuestionSetCommand {
+string Name
+string Description
+List<CreateQuestionDto> Questions
}

class CreateQuestionDto {
+string Type
+string QuestionText
+string ExplainText
+float Score
+List<CreateMultipleChoiceDto> MultipleChoices
+List<CreateMatchingPairDto> MatchingPairs
+List<CreateOrderingItemDto> OrderingItems
+string QTypeShortText
}

class CreateMultipleChoiceDto {
+string Text
+bool IsAnswer
}

class CreateMatchingPairDto {
+string LeftItem
+string RightItem
}

class CreateOrderingItemDto {
+string Text
+int CorrectOrder
}

CreateQuestionSetCommand *-- CreateQuestionDto
CreateQuestionDto *-- CreateMultipleChoiceDto
CreateQuestionDto *-- CreateMatchingPairDto
CreateQuestionDto *-- CreateOrderingItemDto

' ==== Handler ====

class CreateQuestionSetCommandHandler {
-IApplicationDbContext _dbContext
+Handle(request: CreateQuestionSetCommand): Task<string>
}

CreateQuestionSetCommandHandler ..|> IRequestHandler




' Handler uses domain & infra
CreateQuestionSetCommandHandler ..> CreateQuestionSetCommand : <<use>>
CreateQuestionSetCommandHandler --> IApplicationDbContext 
@enduml
