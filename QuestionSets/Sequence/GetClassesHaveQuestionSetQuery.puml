@startuml
actor User
participant "Question Set Detail UI" as UI <<UI>>
participant ":QuestionSetEndpoints" as QuestionSetEndpoints <<Controller>>
participant ":GetClassesHaveQuestionSetQueryHandler" as GetClassesHaveQuestionSetQueryHandler <<Handler>>
participant ":ApplicationDbContext" as ApplicationDbContext <<DbContext>>
participant Database

note right of GetClassesHaveQuestionSetQueryHandler
  Managed by MediatR
end note

note right of ApplicationDbContext
  Managed by IoC
end note

User -> UI : View classes with question set
activate UI
UI -> QuestionSetEndpoints : GET /api/QuestionSet/{questionSetId}/Classes
activate QuestionSetEndpoints
QuestionSetEndpoints -> GetClassesHaveQuestionSetQueryHandler : Handle(GetClassesHaveQuestionSetQuery)
deactivate QuestionSetEndpoints
activate GetClassesHaveQuestionSetQueryHandler
GetClassesHaveQuestionSetQueryHandler -> ApplicationDbContext : Query QuestionSet by QuestionSetId
deactivate GetClassesHaveQuestionSetQueryHandler
activate ApplicationDbContext
ApplicationDbContext -> Database : Query QuestionSet
deactivate ApplicationDbContext
activate Database
Database --> ApplicationDbContext : QuestionSet
deactivate Database
activate ApplicationDbContext
ApplicationDbContext --> GetClassesHaveQuestionSetQueryHandler : QuestionSet
deactivate ApplicationDbContext
activate GetClassesHaveQuestionSetQueryHandler
alt Question Set Not Found
    GetClassesHaveQuestionSetQueryHandler -> QuestionSetEndpoints : Error: QUESTION_SET_NOT_FOUND
    deactivate GetClassesHaveQuestionSetQueryHandler
    activate QuestionSetEndpoints
    QuestionSetEndpoints --> UI : 400 Bad Request { "error": "QUESTION_SET_NOT_FOUND" }
    deactivate QuestionSetEndpoints
    UI -> User : Display error: Question set not found
else Question Set Found
    activate GetClassesHaveQuestionSetQueryHandler
    GetClassesHaveQuestionSetQueryHandler -> ApplicationDbContext : Query ClassUsers (Owner or Teacher) with Class and ClassQuestionSets
    deactivate GetClassesHaveQuestionSetQueryHandler
    activate ApplicationDbContext
    ApplicationDbContext -> Database : Query ClassUsers, Class, ClassQuestionSets
    deactivate ApplicationDbContext
    activate Database
    Database --> ApplicationDbContext : List<ClassUser>
    deactivate Database
    activate ApplicationDbContext
    ApplicationDbContext --> GetClassesHaveQuestionSetQueryHandler : List<ClassUser>
    deactivate ApplicationDbContext
    activate GetClassesHaveQuestionSetQueryHandler
    GetClassesHaveQuestionSetQueryHandler -> GetClassesHaveQuestionSetQueryHandler : Map to GetClassesHaveQuestionSetDto (including IsAdded status)
    GetClassesHaveQuestionSetQueryHandler -> QuestionSetEndpoints : List<GetClassesHaveQuestionSetDto>
    deactivate GetClassesHaveQuestionSetQueryHandler
    activate QuestionSetEndpoints
    QuestionSetEndpoints --> UI : 200 OK (ApiResponse<List<GetClassesHaveQuestionSetDto>>)
    deactivate QuestionSetEndpoints
    UI -> User : Show classes with question set
end
deactivate UI

@enduml