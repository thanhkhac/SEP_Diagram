@startuml
actor User
participant "Test UI" as UI <<UI>>
participant ":QuestionSetEndpoints" as QuestionSetEndpoints <<Controller>>
participant ":GetTestFromQuestionSetQueryHandler" as GetTestFromQuestionSetQueryHandler <<Handler>>
participant ":PlanService" as PlanService <<Service>>
participant ":QuestionSetService" as QuestionSetService <<Service>>
participant ":ApplicationDbContext" as ApplicationDbContext <<DbContext>>
participant Database

note right of GetTestFromQuestionSetQueryHandler
  Managed by MediatR
end note

note right of PlanService
  Managed by IoC
end note

note right of QuestionSetService
  Managed by IoC
end note

note right of ApplicationDbContext
  Managed by IoC
end note

User -> UI : Request test questions
activate UI
UI -> QuestionSetEndpoints : GET /api/QuestionSet/{questionSetId}/Test?numberOfQuestion=n&questionTypes=...
activate QuestionSetEndpoints
QuestionSetEndpoints -> GetTestFromQuestionSetQueryHandler : Handle(GetTestFromQuestionSetQuery)
deactivate QuestionSetEndpoints
activate GetTestFromQuestionSetQueryHandler
GetTestFromQuestionSetQueryHandler -> ApplicationDbContext : Query QuestionSet by QuestionSetId (Include Questions)
deactivate GetTestFromQuestionSetQueryHandler
activate ApplicationDbContext
ApplicationDbContext -> Database : Query QuestionSet, Questions
deactivate ApplicationDbContext
activate Database
Database --> ApplicationDbContext : QuestionSet
deactivate Database
activate ApplicationDbContext
ApplicationDbContext --> GetTestFromQuestionSetQueryHandler : QuestionSet
deactivate ApplicationDbContext
activate GetTestFromQuestionSetQueryHandler
alt Question Set Not Found
    GetTestFromQuestionSetQueryHandler -> QuestionSetEndpoints : Error: QUESTION_SET_NOT_FOUND
    deactivate GetTestFromQuestionSetQueryHandler
    activate QuestionSetEndpoints
    QuestionSetEndpoints --> UI : 400 Bad Request { "error": "QUESTION_SET_NOT_FOUND" }
    deactivate QuestionSetEndpoints
    UI -> User : Display error: Question set not found
else Question Set Found
    activate GetTestFromQuestionSetQueryHandler
    GetTestFromQuestionSetQueryHandler -> PlanService : CanLearn(userId)
    deactivate GetTestFromQuestionSetQueryHandler
    activate PlanService
    PlanService -> ApplicationDbContext : Query UserSubscription
    deactivate PlanService
    activate ApplicationDbContext
    ApplicationDbContext -> Database : Query UserSubscription
    deactivate ApplicationDbContext
    activate Database
    Database --> ApplicationDbContext : List<UserSubscription>
    deactivate Database
    activate ApplicationDbContext
    ApplicationDbContext --> PlanService : List<UserSubscription>
    deactivate ApplicationDbContext
    activate PlanService
    PlanService --> GetTestFromQuestionSetQueryHandler : bool
    deactivate PlanService
    activate GetTestFromQuestionSetQueryHandler
    alt Plan Required
        GetTestFromQuestionSetQueryHandler -> QuestionSetEndpoints : Error: PLAN_REQUIRE_PLAN
        deactivate GetTestFromQuestionSetQueryHandler
        activate QuestionSetEndpoints
        QuestionSetEndpoints --> UI : 400 Bad Request { "error": "PLAN_REQUIRE_PLAN" }
        deactivate QuestionSetEndpoints
        UI -> User : Display error: Please buy a plan
    else Plan Available
        activate GetTestFromQuestionSetQueryHandler
        GetTestFromQuestionSetQueryHandler -> QuestionSetService : CanUserViewQuestionSet(userId, questionSet)
        deactivate GetTestFromQuestionSetQueryHandler
        activate QuestionSetService
        QuestionSetService -> ApplicationDbContext : Query Permission
        deactivate QuestionSetService
        activate ApplicationDbContext
        ApplicationDbContext -> Database : Query Permission
        deactivate ApplicationDbContext
        activate Database
        Database --> ApplicationDbContext : Permission
        deactivate Database
        activate ApplicationDbContext
        ApplicationDbContext --> QuestionSetService : Permission
        deactivate ApplicationDbContext
        activate QuestionSetService
        QuestionSetService --> GetTestFromQuestionSetQueryHandler : bool
        deactivate QuestionSetService
        activate GetTestFromQuestionSetQueryHandler
        alt No permission
            GetTestFromQuestionSetQueryHandler -> QuestionSetEndpoints : Error: COMMON_FORBIDDEN
            deactivate GetTestFromQuestionSetQueryHandler
            activate QuestionSetEndpoints
            QuestionSetEndpoints --> UI : 400 Bad Request { "error": "COMMON_FORBIDDEN" }
            deactivate QuestionSetEndpoints
            UI -> User : Display error: User does not have access to question set
        else Allowed
            activate GetTestFromQuestionSetQueryHandler
            GetTestFromQuestionSetQueryHandler -> GetTestFromQuestionSetQueryHandler : Organize Questions by Type
            GetTestFromQuestionSetQueryHandler -> QuestionSetEndpoints : List<QuestionResponseDto>
            deactivate GetTestFromQuestionSetQueryHandler
            activate QuestionSetEndpoints
            QuestionSetEndpoints --> UI : 200 OK (ApiResponse<List<QuestionResponseDto>>)
            deactivate QuestionSetEndpoints
            UI -> User : Show test questions
        end
    end
end
deactivate UI

@enduml