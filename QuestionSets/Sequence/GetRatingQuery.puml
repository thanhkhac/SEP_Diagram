@startuml
actor User
participant "Question Set Detail UI" as UI <<UI>>
participant ":QuestionSetEndpoints" as QuestionSetEndpoints <<Controller>>
participant ":GetRatingQueryHandler" as GetRatingQueryHandler <<Handler>>
participant ":QuestionSetService" as QuestionSetService <<Service>>
participant ":ApplicationDbContext" as ApplicationDbContext <<DbContext>>
participant Database

note right of GetRatingQueryHandler
  Managed by MediatR
end note

note right of QuestionSetService
  Managed by IoC
end note

note right of ApplicationDbContext
  Managed by IoC
end note

User -> UI : View rating
activate UI
UI -> QuestionSetEndpoints : GET /api/QuestionSet/{questionSetId}/Rating
activate QuestionSetEndpoints
QuestionSetEndpoints -> GetRatingQueryHandler : Handle(GetRatingQuery)
deactivate QuestionSetEndpoints
activate GetRatingQueryHandler
GetRatingQueryHandler -> ApplicationDbContext : Query QuestionSet by QuestionSetId
deactivate GetRatingQueryHandler
activate ApplicationDbContext
ApplicationDbContext -> Database : Query QuestionSet
deactivate ApplicationDbContext
activate Database
Database --> ApplicationDbContext : QuestionSet
deactivate Database
activate ApplicationDbContext
ApplicationDbContext --> GetRatingQueryHandler : QuestionSet
deactivate ApplicationDbContext
activate GetRatingQueryHandler
alt Question Set Not Found
    GetRatingQueryHandler -> QuestionSetEndpoints : Error: QUESTION_SET_NOT_FOUND
    deactivate GetRatingQueryHandler
    activate QuestionSetEndpoints
    QuestionSetEndpoints --> UI : 400 Bad Request { "error": "QUESTION_SET_NOT_FOUND" }
    deactivate QuestionSetEndpoints
    UI -> User : Display error: Question set not found
else Question Set Found
    activate GetRatingQueryHandler
    GetRatingQueryHandler -> QuestionSetService : CanUserViewQuestionSet(userId, questionSet)
    deactivate GetRatingQueryHandler
    activate QuestionSetService
    QuestionSetService -> ApplicationDbContext : Query Permission
    deactivate QuestionSetService
    activate ApplicationDbContext
    ApplicationDbContext -> Database : Query Permission
    deactivate ApplicationDbContext
    activate Database
    Database --> ApplicationDbContext : Permission
    deactivate Database
    activate ApplicationDbContext
    ApplicationDbContext --> QuestionSetService : Permission
    deactivate ApplicationDbContext
    activate QuestionSetService
    QuestionSetService --> GetRatingQueryHandler : bool
    deactivate QuestionSetService
    activate GetRatingQueryHandler
    alt User Not Have Access
        GetRatingQueryHandler -> QuestionSetEndpoints : Error: USER_NOT_ACCESS_TO_QUESTION_SET
        deactivate GetRatingQueryHandler
        activate QuestionSetEndpoints
        QuestionSetEndpoints --> UI : 400 Bad Request { "error": "USER_NOT_ACCESS_TO_QUESTION_SET" }
        deactivate QuestionSetEndpoints
        UI -> User : Display error: User does not have access to question set
    else User Has Access
        activate GetRatingQueryHandler
        GetRatingQueryHandler -> ApplicationDbContext : Query QuestionSetRating by QuestionSetId and UserId
        deactivate GetRatingQueryHandler
        activate ApplicationDbContext
        ApplicationDbContext -> Database : Query QuestionSetRating
        deactivate ApplicationDbContext
        activate Database
        Database --> ApplicationDbContext : QuestionSetRating
        deactivate Database
        activate ApplicationDbContext
        ApplicationDbContext --> GetRatingQueryHandler : QuestionSetRating
        deactivate ApplicationDbContext
        activate GetRatingQueryHandler
        GetRatingQueryHandler -> QuestionSetEndpoints : GetRatingDto
        deactivate GetRatingQueryHandler
        activate QuestionSetEndpoints
        QuestionSetEndpoints --> UI : 200 OK (ApiResponse<GetRatingDto>)
        deactivate QuestionSetEndpoints
        UI -> User : Show rating
    end
end
deactivate UI

@enduml