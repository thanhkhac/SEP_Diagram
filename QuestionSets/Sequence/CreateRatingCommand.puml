@startuml
actor User
participant "Question Set Detail UI" as UI <<UI>>
participant ":QuestionSetEndpoints" as QuestionSetEndpoints <<Controller>>
participant ":CreateRatingCommandHandler" as CreateRatingCommandHandler <<Handler>>
participant ":QuestionSetService" as QuestionSetService <<Service>>
participant ":ApplicationDbContext" as ApplicationDbContext <<DbContext>>
participant Database

note right of CreateRatingCommandHandler
  Managed by MediatR
end note

note right of QuestionSetService
  Managed by IoC
end note

note right of ApplicationDbContext
  Managed by IoC
end note

User -> UI : Submit rating
activate UI
UI -> QuestionSetEndpoints : POST /api/QuestionSet/{questionSetId}/Rating
activate QuestionSetEndpoints
QuestionSetEndpoints -> CreateRatingCommandHandler : Handle(CreateRatingCommand)
deactivate QuestionSetEndpoints
activate CreateRatingCommandHandler
CreateRatingCommandHandler -> ApplicationDbContext : Query QuestionSet by QuestionSetId
deactivate CreateRatingCommandHandler
activate ApplicationDbContext
ApplicationDbContext -> Database : Query QuestionSet
deactivate ApplicationDbContext
activate Database
Database --> ApplicationDbContext : QuestionSet
deactivate Database
activate ApplicationDbContext
ApplicationDbContext --> CreateRatingCommandHandler : QuestionSet
deactivate ApplicationDbContext
activate CreateRatingCommandHandler
alt Question Set Not Found
    CreateRatingCommandHandler -> QuestionSetEndpoints : Error: QUESTION_SET_NOT_FOUND
    deactivate CreateRatingCommandHandler
    activate QuestionSetEndpoints
    QuestionSetEndpoints --> UI : 400 Bad Request { "error": "QUESTION_SET_NOT_FOUND" }
    deactivate QuestionSetEndpoints
    UI -> User : Display error: Question set not found
else Question Set Found
    activate CreateRatingCommandHandler
    CreateRatingCommandHandler -> QuestionSetService : CanUserViewQuestionSet(userId, questionSet)
    deactivate CreateRatingCommandHandler
    activate QuestionSetService
    QuestionSetService -> ApplicationDbContext : Query Permission
    deactivate QuestionSetService
    activate ApplicationDbContext
    ApplicationDbContext -> Database : Query Permission
    deactivate ApplicationDbContext
    activate Database
    Database --> ApplicationDbContext : Permission
    deactivate Database
    activate ApplicationDbContext
    ApplicationDbContext --> QuestionSetService : Permission
    deactivate ApplicationDbContext
    activate QuestionSetService
    QuestionSetService --> CreateRatingCommandHandler : bool
    deactivate QuestionSetService
    activate CreateRatingCommandHandler
    alt User Not Have Access
        CreateRatingCommandHandler -> QuestionSetEndpoints : Error: USER_NOT_ACCESS_TO_QUESTION_SET
        deactivate CreateRatingCommandHandler
        activate QuestionSetEndpoints
        QuestionSetEndpoints --> UI : 400 Bad Request { "error": "USER_NOT_ACCESS_TO_QUESTION_SET" }
        deactivate QuestionSetEndpoints
        UI -> User : Display error: User does not have access to question set
    else User Has Access
        activate CreateRatingCommandHandler
        CreateRatingCommandHandler -> ApplicationDbContext : Query existing QuestionSetRating by QuestionSetId and UserId
        deactivate CreateRatingCommandHandler
        activate ApplicationDbContext
        ApplicationDbContext -> Database : Query QuestionSetRating
        deactivate ApplicationDbContext
        activate Database
        Database --> ApplicationDbContext : QuestionSetRating
        deactivate Database
        activate ApplicationDbContext
        ApplicationDbContext --> CreateRatingCommandHandler : QuestionSetRating
        deactivate ApplicationDbContext
        activate CreateRatingCommandHandler
        alt Existing Rating Found
            ' activate CreateRatingCommandHandler
            CreateRatingCommandHandler -> ApplicationDbContext : Update existing QuestionSetRating
            deactivate CreateRatingCommandHandler
            activate ApplicationDbContext
            ApplicationDbContext -> Database : Update QuestionSetRating
            deactivate ApplicationDbContext
            activate Database
            Database --> ApplicationDbContext : Success
            deactivate Database
            ' activate ApplicationDbContext
            ' deactivate ApplicationDbContext
        else No Existing Rating
            activate CreateRatingCommandHandler
            CreateRatingCommandHandler -> ApplicationDbContext : Add new QuestionSetRating
            deactivate CreateRatingCommandHandler
            activate ApplicationDbContext
            ApplicationDbContext -> Database : Insert QuestionSetRating
            deactivate ApplicationDbContext
            activate Database
            Database --> ApplicationDbContext : Success
            deactivate Database
            ' activate ApplicationDbContext
            ' deactivate ApplicationDbContext
        end
        activate CreateRatingCommandHandler
        CreateRatingCommandHandler -> ApplicationDbContext : Recalculate QuestionSet Rating (Average, Count, Sum)
        deactivate CreateRatingCommandHandler
        activate ApplicationDbContext
        ApplicationDbContext -> Database : Update QuestionSet
        deactivate ApplicationDbContext
        activate Database
        Database --> ApplicationDbContext : Success
        deactivate Database
        activate ApplicationDbContext
        ApplicationDbContext --> CreateRatingCommandHandler : Guid
        deactivate ApplicationDbContext
        activate CreateRatingCommandHandler
        CreateRatingCommandHandler -> QuestionSetEndpoints : Guid
        deactivate CreateRatingCommandHandler
        activate QuestionSetEndpoints
        QuestionSetEndpoints --> UI : 200 OK (ApiResponse<Guid>)
        deactivate QuestionSetEndpoints
        UI -> User : Display info: Rating created/updated
    end
end
deactivate UI

@enduml