@startuml
actor User
participant "Class Members UI" as UI <<UI>>
participant ":ClassEndpoints" as ClassEndpoints <<Controller>>
participant ":SearchStudentInClassQueryHandler" as SearchStudentInClassQueryHandler <<Handler>>
participant ":ClassService" as ClassService <<Service>>
participant ":ApplicationDbContext" as ApplicationDbContext <<DbContext>>
participant Database

note right of SearchStudentInClassQueryHandler
  Managed by MediatR
end note

note right of ClassService
  Managed by IoC
end note

note right of ApplicationDbContext
  Managed by IoC
end note

User -> UI : Search for students
activate UI
UI -> ClassEndpoints : GET /api/Class/{ClassId}/Students?keyword=...
activate ClassEndpoints
ClassEndpoints -> SearchStudentInClassQueryHandler : Handle(SearchStudentInClassQuery)
deactivate ClassEndpoints
activate SearchStudentInClassQueryHandler
SearchStudentInClassQueryHandler -> ApplicationDbContext : Query Class by ClassId
deactivate SearchStudentInClassQueryHandler
activate ApplicationDbContext
ApplicationDbContext -> Database : Query Class
deactivate ApplicationDbContext
activate Database
Database --> ApplicationDbContext : Class
deactivate Database
activate ApplicationDbContext
ApplicationDbContext --> SearchStudentInClassQueryHandler : Class
deactivate ApplicationDbContext
activate SearchStudentInClassQueryHandler
alt Class Not Found
    SearchStudentInClassQueryHandler -> ClassEndpoints : Error: CLASS_NOTFOUND
    deactivate SearchStudentInClassQueryHandler
    activate ClassEndpoints
    ClassEndpoints --> UI : 400 Bad Request { "error": "CLASS_NOTFOUND" }
    deactivate ClassEndpoints
    UI -> User : Display error: Class not found
else Class Found
    activate SearchStudentInClassQueryHandler
    SearchStudentInClassQueryHandler -> ClassService : IsUserInClass(classId)
    deactivate SearchStudentInClassQueryHandler
    activate ClassService
    ClassService -> ApplicationDbContext : Query ClassUser
    deactivate ClassService
    activate ApplicationDbContext
    ApplicationDbContext -> Database : Query ClassUser
    deactivate ApplicationDbContext
    activate Database
    Database --> ApplicationDbContext : ClassUser
    deactivate Database
    activate ApplicationDbContext
    ApplicationDbContext --> ClassService : ClassUser
    deactivate ApplicationDbContext
    activate ClassService
    ClassService --> SearchStudentInClassQueryHandler : bool
    deactivate ClassService
    activate SearchStudentInClassQueryHandler
    alt User Not In Class
        SearchStudentInClassQueryHandler -> ClassEndpoints : Error: NOT_FOUND_USER_IN_CLASS
        deactivate SearchStudentInClassQueryHandler
        activate ClassEndpoints
        ClassEndpoints --> UI : 400 Bad Request { "error": "NOT_FOUND_USER_IN_CLASS" }
        deactivate ClassEndpoints
        UI -> User : Display error: User not in class
    else User In Class
        activate SearchStudentInClassQueryHandler
        SearchStudentInClassQueryHandler -> ApplicationDbContext : Query Students in Class
        deactivate SearchStudentInClassQueryHandler
        activate ApplicationDbContext
                ApplicationDbContext -> Database : Query Students with dynamic filter
                deactivate ApplicationDbContext
                activate Database
                Database --> ApplicationDbContext : List<Student>
                deactivate Database
                activate ApplicationDbContext
                ApplicationDbContext --> SearchStudentInClassQueryHandler : List<Student>
        deactivate ApplicationDbContext
        activate SearchStudentInClassQueryHandler
        SearchStudentInClassQueryHandler -> ClassEndpoints : PaginatedList<StudentSearchResultDto>
        deactivate SearchStudentInClassQueryHandler
        activate ClassEndpoints
        ClassEndpoints --> UI : 200 OK (ApiResponse<PaginatedList<StudentSearchResultDto>>)
        deactivate ClassEndpoints
        UI -> User : Show student search results
    end
end
deactivate UI

@enduml