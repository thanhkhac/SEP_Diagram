@startuml
actor User
participant "Class Members UI" as UI
participant ClassEndpoints
participant SearchStudentInClassQueryHandler as Handler
participant ClassService
participant ApplicationDbContext
participant Database

User -> UI : Search for students
UI -> ClassEndpoints : GET /api/Class/{ClassId}/Students?keyword=...
ClassEndpoints -> Handler : Handle(SearchStudentInClassQuery)
Handler -> ApplicationDbContext : Query Class by ClassId
ApplicationDbContext -> Database : Query Class
Database --> ApplicationDbContext : Class
ApplicationDbContext --> Handler : Class
alt Class Not Found
    Handler --> ClassEndpoints : Error: CLASS_NOTFOUND
    ClassEndpoints --> UI : 400 Bad Request (errorCode: CLASS_NOTFOUND)
    UI -> User : Error: Class not found
else Class Found
    Handler -> ClassService : IsUserInClass(classId)
    ClassService -> ApplicationDbContext : Query ClassUser
    ApplicationDbContext -> Database : Query ClassUser
    Database --> ApplicationDbContext : ClassUser
    ApplicationDbContext --> ClassService : ClassUser
    ClassService --> Handler : bool
    alt User Not In Class
        Handler --> ClassEndpoints : Error: NOT_FOUND_USER_IN_CLASS
        ClassEndpoints --> UI : 400 Bad Request (errorCode: NOT_FOUND_USER_IN_CLASS)
        UI -> User : Error: User not in class
    else User In Class
        Handler -> ApplicationDbContext : Query Students in Class
        alt Keyword and FieldName Provided
            Handler -> Handler : Validate FieldName
            alt Invalid FieldName
                Handler --> ClassEndpoints : Error: FIELD_NAME_NOT_FOUND
                ClassEndpoints --> UI : 400 Bad Request (errorCode: FIELD_NAME_NOT_FOUND)
                UI -> User : Error: Invalid search field
            else Valid FieldName
                ApplicationDbContext -> Database : Query Students with dynamic filter
                Database --> ApplicationDbContext : List<Student>
                ApplicationDbContext --> Handler : List<Student>
            end
        else No Keyword or FieldName
            ApplicationDbContext -> Database : Query all Students in Class
            Database --> ApplicationDbContext : List<Student>
            ApplicationDbContext --> Handler : List<Student>
        end
        Handler --> ClassEndpoints : PaginatedList<StudentSearchResultDto>
        ClassEndpoints --> UI : 200 OK (ApiResponse<PaginatedList<StudentSearchResultDto>>)
        UI -> User : Show student search results
    end
end
@enduml